import { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import { Line, Bar } from 'react-chartjs-2';
import 'chart.js/auto';

const contractAddress = "0xYourContractAddress";
const contractABI = [ /* Insert ABI Here */ ];

export default function WeatherDashboard() {
    const [metarData, setMetarData] = useState(null);
    const [historicalData, setHistoricalData] = useState([]);
    const [prediction, setPrediction] = useState(null);
    const [transactionHash, setTransactionHash] = useState(null);
    const [walletConnected, setWalletConnected] = useState(false);
    const [selectedParameter, setSelectedParameter] = useState("temperature");
    const [alert, setAlert] = useState(null);

    useEffect(() => {
        fetchMETARData();
        const interval = setInterval(fetchMETARData, 60000); // Auto-update every 60 seconds
        return () => clearInterval(interval);
    }, []);

    const fetchMETARData = async () => {
        try {
            const response = await fetch("https://aviationweather.gov/api/metar?format=json&station=KJFK");
            const data = await response.json();
            setMetarData(data);
            setHistoricalData(prevData => [...prevData.slice(-9), data]); // Keep last 10 records
            checkExtremeWeather(data);
        } catch (error) {
            console.error("Error fetching METAR data:", error);
        }
    };

    const checkExtremeWeather = (data) => {
        if (data.wind_speed > 50) {
            setAlert("⚠️ High Wind Alert: Winds exceeding 50 knots detected!");
        } else if (data.temperature < -10) {
            setAlert("❄️ Extreme Cold Alert: Temperatures below -10°C detected!");
        } else if (data.weatherCondition && data.weatherCondition.includes("Thunderstorm")) {
            setAlert("⛈️ Severe Thunderstorm Warning!");
        } else {
            setAlert(null);
        }
    };

    const connectWallet = async () => {
        if (window.ethereum) {
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            await window.ethereum.request({ method: "eth_requestAccounts" });
            setWalletConnected(true);
        } else {
            alert("MetaMask is required to connect your wallet.");
        }
    };

    const submitPrediction = async () => {
        if (!walletConnected) return alert("Please connect your wallet first.");
        
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(contractAddress, contractABI, signer);

        try {
            const tx = await contract.submitMETARPrediction(
                prediction.temperature,
                prediction.dewPoint,
                prediction.pressure,
                prediction.windSpeed,
                prediction.windDirection,
                prediction.visibility,
                prediction.cloudCover,
                prediction.cloudBase,
                prediction.weatherCondition
            );
            await tx.wait();
            setTransactionHash(tx.hash);
        } catch (error) {
            console.error("Error submitting prediction:", error);
        }
    };

    const historicalChartData = {
        labels: historicalData.map((_, index) => `T-${historicalData.length - index}`),
        datasets: [
            {
                label: `Historical ${selectedParameter.charAt(0).toUpperCase() + selectedParameter.slice(1)} Data`,
                data: historicalData.map(data => data[selectedParameter] || 0),
                borderColor: "purple",
                fill: false,
                tension: 0.4,
            }
        ]
    };

    return (
        <div className="p-4 max-w-4xl mx-auto">
            <h1 className="text-2xl font-bold">AI-Powered Weather Prediction Dashboard</h1>
            
            {!walletConnected ? (
                <button onClick={connectWallet} className="mt-4 px-4 py-2 bg-blue-600 text-white rounded">
                    Connect Wallet
                </button>
            ) : (
                <p className="mt-4 text-green-600">Wallet Connected ✅</p>
            )}
            
            {alert && (
                <div className="mt-4 p-4 border rounded bg-red-200 text-red-800">
                    <h2 className="text-xl font-semibold">Weather Alert</h2>
                    <p>{alert}</p>
                </div>
            )}
            
            {metarData && (
                <div className="mt-6 p-4 border rounded bg-gray-100">
                    <h2 className="text-xl font-semibold">Real-Time METAR Data (Auto-Updates Every Minute)</h2>
                    <p>Temperature: {metarData.temperature} °C</p>
                    <p>Wind Speed: {metarData.wind_speed} knots</p>
                    <p>Pressure: {metarData.altimeter} inHg</p>
                </div>
            )}

            {prediction && (
                <div className="mt-6 p-4 border rounded bg-yellow-100">
                    <h2 className="text-xl font-semibold">AI Weather Prediction</h2>
                    <p>Temperature: {prediction.temperature} °C</p>
                    <p>Wind Speed: {prediction.windSpeed} knots</p>
                    <p>Pressure: {prediction.pressure} inHg</p>
                </div>
            )}

            <div className="mt-6">
                <h2 className="text-xl font-semibold">Historical Weather Trends</h2>
                <select 
                    className="mb-4 p-2 border rounded" 
                    value={selectedParameter} 
                    onChange={(e) => setSelectedParameter(e.target.value)}
                >
                    <option value="temperature">Temperature (°C)</option>
                    <option value="wind_speed">Wind Speed (knots)</option>
                    <option value="altimeter">Pressure (inHg)</option>
                </select>
                <Line data={historicalChartData} />
            </div>

            <button onClick={submitPrediction} className="mt-4 px-4 py-2 bg-green-600 text-white rounded">
                Submit AI Prediction
            </button>
            
            {transactionHash && (
                <p className="mt-4 text-blue-600">Transaction Hash: {transactionHash}</p>
            )}
        </div>
    );
}
